    @model DocumentManagementSystem.Models.DocumentTypeModel

    @{
        ViewBag.Title = "Dosya Türü Ekleme";
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }

    <div class="card bg-light">
        <div class="card-body">

            @using (Html.BeginForm("AddDocumentType", "DocumentType", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="row">
                    <!--SOL TARAF-->
                    <div class="col col-lg-6">
                        <div class="form-group">
                            @Html.Label("Belge Türü Adı *")
                            @Html.TextBoxFor(x => x.documentType.DocumentTypeName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.documentType.DocumentTypeName)
                            @Html.ValidationMessage("DocumentTypeName")
                            <br />
                            @Html.Label("Belge Türü Yazısı *")
                            @Html.TextAreaFor(x => x.documentType.DocumentTypeText, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.documentType.DocumentTypeText)
                            @Html.ValidationMessage("DocumentTypeText")
                            @*<br />
                            @Html.Label("Belge Türü İmza Adedi *")
                            @Html.TextBoxFor(x => x.documentType.DocumentTypeNumSignature, new { @class = "form-control", type = "number" })
                            @Html.ValidationMessageFor(x => x.documentType.DocumentTypeNumSignature)*@

                            <br />
                            @Html.Label("Belge Türü İmza/İmzalar *")
                            <span title="Belgeye eklenecek imza/imzaları seçiniz. İmzalar seçim sırasına göre soldan sağa sıralanacaktır !"><i class="fa fa-info-circle text-primary"></i></span>
                            @Html.DropDownListFor(x => x.AdminIds, Model.selectAdminItems, new { @class = "form-control", id = "sec", multiple = "multiple", placeholder = "İmza seçiniz..." })
                            @Html.ValidationMessage("DocumentTypeNumSignature")


                        </div>
                    </div>

                    <script>
                        $("#sec").chosen({
                            'no_results_text': 'Aranan kişi bulunamadı!',
                            'placeholder_text_multiple': 'İmza/İmzalar seçiniz...',
                            'display_selected_options': false,
                            'max_selected_options': 3
                        });

                        $("#sec").bind("chosen:maxselected", function () { alert("Seçilebilecek maksimum imza sayısına ulaştınız!"); }); 

                    </script>

                    <!--SAĞ TARAF-->
                    <div class="col col-lg-6">
                        <label>Belge Türü Aktiflik *</label>
                        <div class="form-check">
                            @Html.RadioButtonFor(x => x.documentType.DocumentTypeStatus, true, new { @class = " form-check-input", @checked = "checked" })
                            <label class="form-check-label" for="gridRadios2">
                                Aktif-Kullanılabilir
                            </label>
                        </div>
                        <div class="form-check">
                            @Html.RadioButtonFor(x => x.documentType.DocumentTypeStatus, false, new { @class = "form-check-input" })
                            <label class="form-check-label" for="gridRadios2">
                                Pasif-Kullanılamaz
                            </label>
                        </div>

                        <br />
                        @Html.Label("Belge Türü Arka Plan Görüntüsü (PNG-JPG)*")
                        <div class="input-group">
                            <input type="file" name="file" class="form-control" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
                        </div>

                        @{ if (ViewBag.RecordStatus != null)
                            {
                                if (ViewBag.RecordStatus)
                                {
                                    //<p></p>
                                }
                                else
                                {
                                    <p>@ViewBag.UploadError</p>
                                }
                            }
                            else
                            {
                                <p>@ViewBag.UploadError</p>
                            }
                        }
                        <br />
                        <button id="AdminAddButton" class="btn btn-primary">Yeni Belge Türü Oluştur</button>
                    </div>
                </div>
            }
        </div>
    </div>
@{

    if (ViewBag.RecordStatus != null)
    {
        if (ViewBag.RecordStatus)
        {
            <script>
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'btn btn-success',
                        cancelButton: 'btn btn-primary'
                    },
                    buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                    title: 'Başarılı',
                    text: "Yeni Belge Türü Oluşturuldu!",
                    icon: 'success',
                    showCancelButton: true,
                    confirmButtonText: 'Tamam',
                    cancelButtonText: 'Belge Türü Listeleme Sayfasına Git',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {

                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        window.location.href = "@Url.Action("DocumentTypeList", "DocumentType")";
                    }
                })
            </script>
        }

    }

}
